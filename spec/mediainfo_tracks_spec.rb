RSpec.describe MediaInfo::Tracks do

  describe '*? for each types instance methods' do

    context 'when the chosen parser (MEDIAINFO_XML_PARSER) is the default one' do
      include_context 'sets MEDIAINFO_XML_PARSER to default value'

      context 'when the specified type is included in these Tracks' do
        it 'returns true' do
          expect(MediaInfo.from(xml_files_content[:sample_iphone_mov]).other?).to eq(true)
          expect(MediaInfo.from(xml_files_content[:multiple_streams_with_id]).video2?).to eq(true)
        end
      end

      context 'when the specified type is not included in these Tracks' do
        it 'returns false' do
          expect(MediaInfo.from(http_valid_video_url).image?).to be_falsey
        end
      end
    end


    context 'when the chosen parser (MEDIAINFO_XML_PARSER) is nokogiri' do
      include_context 'sets MEDIAINFO_XML_PARSER to nokogiri'

      context 'when the specified type is included in these Tracks' do
        it 'returns true' do
          expect(MediaInfo.from(xml_files_content[:sample_iphone_mov]).other?).to eq(true)
        end
      end

      context 'when the specified type is not included in these Tracks' do
        it 'returns false' do
          expect(MediaInfo.from(xml_files_content[:multiple_streams_with_id]).video5?).to be_falsey
        end
      end
    end

  end

  describe '.count for each types instance method' do

    context 'when the chosen parser (MEDIAINFO_XML_PARSER) is the default one' do
      include_context 'sets MEDIAINFO_XML_PARSER to default value'

      context 'when the specified type is included in these Tracks' do
        it 'returns the number of occurrences of this type' do
          expect(MediaInfo.from(xml_files_content[:subtitle]).text.count).to eq(4)
          expect(MediaInfo.from(xml_files_content[:sample_iphone_mov]).audio.count).to eq(1)
          expect(MediaInfo.from(xml_files_content[:multiple_streams_no_id]).video.count).to eq(3)
          expect(MediaInfo.from(http_valid_video_url).video.count).to eq(1)
        end
      end
    end


    context 'when the chosen parser (MEDIAINFO_XML_PARSER) is nokogiri' do
      include_context 'sets MEDIAINFO_XML_PARSER to nokogiri'

      context 'when the specified type is included in these Tracks' do
        it 'returns the number of occurrences of this type' do
          expect(MediaInfo.from(xml_files_content[:subtitle]).text3.count).to eq(1)
          expect(MediaInfo.from(xml_files_content[:multiple_streams_no_id]).video6.count).to eq(1)
          expect(MediaInfo.from(http_valid_video_url).video.count).to eq(1)
        end
      end
    end

  end

  describe '.extra method for \'general\' type' do

    context 'when the chosen parser (MEDIAINFO_XML_PARSER) is the default one' do
      include_context 'sets MEDIAINFO_XML_PARSER to default value'

      context 'when the submitted file has been generated by an Apple device' do
        it 'does not return nil' do
          expect(MediaInfo.from(xml_files_content[:sample_iphone_mov]).general.extra).to_not be(nil)
        end

        it 'returns the correct value for each extra information' do
          expect(MediaInfo.from(xml_files_content[:sample_iphone_mov]).general.extra.com_apple_quicktime_make).to eq('Apple')
        end
      end
    end


    context 'when the chosen parser (MEDIAINFO_XML_PARSER) is nokogiri' do
      include_context 'sets MEDIAINFO_XML_PARSER to nokogiri'

      context 'when the submitted file has been generated by an Apple device' do
        it 'does not return nil' do
          expect(MediaInfo.from(xml_files_content[:sample_iphone_mov]).general.extra).to_not be(nil)
        end

        it 'returns the correct value for each extra information' do
          expect(MediaInfo.from(xml_files_content[:sample_iphone_mov]).general.extra.com_apple_quicktime_software).to eq('11.2.6')
        end
      end
    end

  end

  # TODO

  describe 'Attribute' do

    it 'name standardization' do
      # REXML
      expect(MediaInfo.from(xml_files_content[:sample_mov]).video.bit_rate).to be(nil)
      expect(MediaInfo.from(xml_files_content[:multiple_streams_no_id]).video.framerate).to_not be(nil)
      # NOKOGIRI
      ENV['MEDIAINFO_XML_PARSER'] = 'nokogiri'
      expect(MediaInfo.from(xml_files_content[:sample_mp4]).video.bitrate).to_not be(nil)
      expect(MediaInfo.from(xml_files_content[:sample_jpg]).general.file_size).to be(nil)
      ENV['MEDIAINFO_XML_PARSER'] = nil
    end

    it 'strings with float or integer are converted with to_f or to_i respectively' do
      # REXML
      expect(MediaInfo.from(xml_files_content[:sample_iphone_mov]).general.extra.com_apple_quicktime_software).to eq('11.2.6') # Check that two or more dots remain strings
      expect(MediaInfo.from(xml_files_content[:sample_avi]).video.bits__pixel_frame_).to be_a(Float)
      expect(MediaInfo.from(xml_files_content[:sample_avi]).video.id).to be_a(Integer)
      expect(MediaInfo.from(xml_files_content[:multiple_streams_no_id]).video.bitrate).to_not be_a(Float)
      # NOKOGIRI
      ENV['MEDIAINFO_XML_PARSER'] = 'nokogiri'
      expect(MediaInfo.from(xml_files_content[:sample_3gp]).video.colorimetry).to eq('4:2:0')
      expect(MediaInfo.from(xml_files_content[:sample_mov]).video.display_aspect_ratio).to be_a(String)
      expect(MediaInfo.from(xml_files_content[:sample_mp4]).audio.codec_id).to be_a(Integer)
      ENV['MEDIAINFO_XML_PARSER'] = nil
    end

    it 'Duration is converted to milliseconds' do
      # REXML

      # TODO
      # expect(MediaInfo.from(xml_files_content[:sample_iphone_mov]).video.duration).to be_a(Integer)
      # expect(MediaInfo.from(xml_files_content[:sample_iphone_mov]).video.duration).to eq(194243)

      expect(MediaInfo.from(xml_files_content[:sample_mov]).video.duration).to be_a(Integer)
      expect(MediaInfo.from(xml_files_content[:multiple_streams_no_id]).video100.duration).to eq(4170)
      # NOKOGIRI
      ENV['MEDIAINFO_XML_PARSER'] = 'nokogiri'
      expect(MediaInfo.from(xml_files_content[:sample_3gp]).video.duration).to be_a(Integer)
      expect(MediaInfo.from(xml_files_content[:sample_avi]).video.duration).to eq(15164)
      ENV['MEDIAINFO_XML_PARSER'] = nil
    end

  end

end
